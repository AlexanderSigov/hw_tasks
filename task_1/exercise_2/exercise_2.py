"""
№ 1 Сумма элементов с помощью enumerate и zip
"""
def sum_indexed_elements(data: list) -> list:
    return pass # решение (сумма с помощью enumerate) в 1 строку


def pairwise_sums(list1: list, list2: list) -> list:
    return pass # решение (сумма с помощью zip) в 1 строку


"""
№ 2 Реализация функции, процедуры и генератора
"""

# Процедура (ничего не возвращает)
def simple_procedure(): # выводит строку This is a procedure



# Функция (возвращает значение)
def simple_function() -> str: # возвращает строку "This is a function"


# Генератор (возвращает итератор)
def simple_generator(): # возвращает сначала "This is", а затем "a generator"
    yield "This is"
    yield "a generator"


"""
№ 3 Подсчет аргументов функции
Реализовать функцию `count_arguments` с произвольным количеством аргументов для их подсчета
"""
def count_arguments(*args, **kwargs):
    return len(args) + len(kwargs)


"""
№ 4 Реализация инкапсуляции
Создать класс BankAccount, при инициализации задать приватное значение баланса равным 0.
Создать метод deposit с возможностью внесения цифровых условных единиц на баланс.
Создать метод withdraw с возможностью снятия цифровых условных единис с баланса.
Создать метод get_balance для получения информации об остатке на балансе.
"""

"""
№ 5 Реализация класса с магическими методами
Создать класс Vector. При инициализации указывать параметры x, y.
Создать магический метод сложения двух объектов класса Vector.
Создать магический метод для возврата строки с информацией о точке в виде `Vector(значение x, значение y)`
Создать магический метод для сравнения двух объектов класса Vector. 
"""

"""
№ 6 Работа с контекстными менеджерами
Создать класс FilesManager. При инициализации указывать название файла и режим работы с ним.
При вызове контекстного менеджера with ... as открывать файл в заданном режиме взаимодействия и возвращать содержимое.
При окончании работы с файлом внутри контектного менеджера, файл должен корректно закрываться.
Использовать методы __enter__, __exit__
"""

